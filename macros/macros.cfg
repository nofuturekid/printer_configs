[pause_resume]

[display_status]

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PAUSE
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}        #edit to your park position
    {% set y = params.Y|default(210) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro M572]
gcode:
  {% set S = params.S|default(0.06)|float %}
  SET_PRESSURE_ADVANCE ADVANCE={S}

[gcode_macro M207]
# Snnn positive length to retract, in mm
# Rnnn positive or negative additional length to un-retract, in mm, default zero
# Fnnn retraction feedrate, in mm/min
# Tnnn feedrate for un-retraction if different from retraction, mm/min (RepRapFirmware 1.16 and later only)
# Znnn additional zlift/hop
# SET_RETRACTION [RETRACT_LENGTH=<mm>] [RETRACT_SPEED=<mm/s>] [UNRETRACT_EXTRA_LENGTH=<mm>] [UNRETRACT_SPEED=<mm/s>]
gcode:
    # {% set S = params.S | float %}

    # {% if not (params.S or params.F or params.R or params.T)  %}
    #     GET_RETRACTION
    # {% endif %}

    {% if (params.S or params.F or params.R or params.T) %}
        SET_RETRACTION {% if params.S%}RETRACT_LENGTH={params.S|float} {% endif -%}
                       {% if params.F%}RETRACT_SPEED={params.F|float} {% endif -%}
                       {% if params.R%}UNRETRACT_EXTRA_LENGTH={params.R|float} {% endif -%}
                       {% if params.T%}UNRETRACT_SPEED={params.T|float}{% endif -%}
    {% endif %}
    GET_RETRACTION

[gcode_macro M204]
rename_existing: M204.1
gcode:
    {% set f = params.F|default(0.5)|float %}

    {% if 'S' in params %}
        {% set s = params.S|float %}
        SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
    {% else %}
        {% if 'P' in params %}
            {% set p = params.P|float %}
            {% if 'T' in params %}
                {% set t = params.T|float %}
                {% if p < t %}
                    SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
                {% else %}
                    SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
                {% endif %}
            {% else %}
                SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
            {% endif %}
        {% elif 'T' in params %}
            {% set t = params.T|float %}
            SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
    {% endif %}

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 

            {% endfor %}
        {% endif %} 
    {% endfor %}
