[pause_resume]

[display_status]

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
gcode:
    CLEAR_PAUSE
    SAVE_GCODE_STATE NAME=START_PRINT
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(215)|float %}
    # Metric values
    G21
    # Absolute positioning
    G90 
    # Set extruder to absolute extrusions
    M82
    # Reset the G-Code Z offset (adjust Z offset if needed)
    SET_GCODE_OFFSET Z=0.0
    # Start bed heating and wait for target temperature
    M190 S{BED_TEMP}
    # Home the printer
    G28
    # Z-Tilt
    Z_TILT_ADJUST
    # Re-Home Z after after Z_TILT
    G28 Z
    # Do mesh bed calibration
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    # Move nozzle to ooze position
    G1 X-1 Y-5 Z0.2 F6000
    # Set and wait for nozzle to reach temperature
    M109 S{EXTRUDER_TEMP}
    PRIME_LINE
    RESTORE_GCODE_STATE NAME=START_PRINT
    # Metric values
    G21
    # Absolute positioning
    G90 
    # Set extruder to relative extrusions
    M83

[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
    SAVE_GCODE_STATE NAME=PRIME_LINE
    # Absolute positioning
    G90 
    # Absolute extrusion
    M82
    M117 Priming nozzle with prime line..
    RESPOND MSG="Priming nozzle with prime line.."
    # Lift 5 mm
    G1 Z5 F3000
    # Move to prime area
    G1 X{printer.toolhead.axis_minimum.x + 1} Y{printer.toolhead.axis_minimum.y + 1} F3000
    # Get ready to prime
    G1 Z0.3 F3000
    # Reset extrusion distance
    G92 E0
    # Prime nozzle 
    G1 X{printer.toolhead.axis_minimum.x + 80} E16 F1200
    # Wipe
    G1 X{printer.toolhead.axis_minimum.x + 100} F6000
    RESTORE_GCODE_STATE NAME=PRIME_LINE

[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
    SAVE_GCODE_STATE NAME=PRIME_BLOB
    M117 Priming nozzle with prime blob..
    RESPOND MSG="Priming nozzle with prime blob.."
    # Absolute positioning
    G90 
    # Relative extrusion
    M83
    # Lift 5 mm
    G1 Z5 F3000
    # move to blob position
    G1 X{printer.toolhead.axis_minimum.x + 1} Y{printer.toolhead.axis_minimum.y + 1} Z0.5 F3000
    # Extrude a blob
    G1 F60 E20
    # 40% fan
    M106 S102 
    # Move the extruder up by 5mm while extruding, breaks away from blob
    G1 Z5 F100 E5  
    # Move to wipe position, but keep extruding so the wipe is attached to blob
    G1 F200 X{printer.toolhead.axis_minimum.x + 25} E1 
    # Go down diagonally while extruding
    # Broken down in z moves under 2mm as a workaround for a tuning tower test.
    # The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
    G1 F200 X{printer.toolhead.axis_minimum.x + 30} Z3.8 E0.5
    G1 F200 X{printer.toolhead.axis_minimum.x + 35} Z2.6 E0.5
    G1 F200 X{printer.toolhead.axis_minimum.x + 40} Z1.4 E0.5
    G1 F200 X{printer.toolhead.axis_minimum.x + 45} Z0.2 E0.5
    # 0% fan
    M106 S0
    # small wipe line
    G1 F200 X{printer.toolhead.axis_minimum.x +50} Z0.2 E0.6 
    # Break away wipe
    G1 F6000 X{printer.toolhead.axis_minimum.x + 100}
    RESTORE_GCODE_STATE NAME=PRIME_BLOB

[gcode_macro END_PRINT]
gcode:
    SAVE_GCODE_STATE NAME=END_PRINT
    {% set END_X = params.X|default(0)|float %}
    {% set END_Y = params.Y|default(210)|float %}
    {% set END_Z = params.Z|default(10)|float %}

    # Turn off bed, extruder, and fan
    M140 S0
    M104 S0
    M107

    # Retract filament if possible
    {% if printer.extruder.temperature > printer.configfile.settings.extruder.min_extrude_temp %}
        G1 E-3 F600
    {% endif %}

    # Move head to parking position
    G90
    G1 X{END_X} Y{END_Y} F6000

    # Safely raise nozzle by 10mm
    SAFE_RAISE_Z Z={END_Z}

    # Disable steppers
    M84
    RESTORE_GCODE_STATE NAME=END_PRINT

[gcode_macro SAFE_RAISE_Z]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_RAISE_Z
    ##### set defaults #####
    {% set z = params.Z|default(10)|float %} #edit to your park position
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    G91
    G1 Z{z_safe}
    RESTORE_GCODE_STATE NAME=SAFE_RAISE_Z

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
    G91
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments
        M104 S{params.TEMP|default(220, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    M117 Unloading filament...
    # Retract filament to cold end area
    G0 E-5 F3600
    # Wait for three seconds
    G4 P3000
    # Push back the filament to smash any stringing
    G0 E5 F3600
    # Retract back fast in to the cold zone and wait another 4 seconds
    G0 E-15 F3600
    G4 P4000
    # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears
    G0 E-50 F300
    M117 Filament unloaded!
    RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    G91
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        M104 S{params.TEMP|default(220, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}
    M117 Loading filament...
    # Load the filament into the hotend area
    G0 E50 F600
    # Wait a second
    G4 P1000
    # Purge
    G0 E40 F100
    # Wait for purge to complete
    M400
    M117 Filament loaded!
    RESPOND MSG="Filament loaded!"
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    PAUSE
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    BASE_CANCEL_PRINT

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    ##### set defaults #####
    {% set x = params.X|default(0) %}        #edit to your park position
    {% set y = params.Y|default(210) %}      #edit to your park position
    {% set z = params.Z|default(10)|float %} #edit to your park position
    {% set e = params.E|default(1) %}        #edit to your retract length
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% set lift_z = z|abs %}
    {% if act_z < (max_z - lift_z) %}
        {% set z_safe = lift_z %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{e} F2100
    G1 Z{z_safe}
    G90
    G1 X{x} Y{y} F6000

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### set defaults #####
    {% set e = params.E|default(1) %} #edit to your retract length
    G91
    G1 E{e} F2100
    G90
    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    BASE_RESUME

[gcode_macro M572]
gcode:
    {% if 'S' in params %}
        {% set S = params.S|float %}
        SET_PRESSURE_ADVANCE ADVANCE={S}
    {% else %}
        SET_PRESSURE_ADVANCE
    {% endif %}

[gcode_macro M207]
# Snnn positive length to retract, in mm
# Rnnn positive or negative additional length to un-retract, in mm, default zero
# Fnnn retraction feedrate, in mm/min
# Tnnn feedrate for un-retraction if different from retraction, mm/min (RepRapFirmware 1.16 and later only)
# Znnn additional zlift/hop
# SET_RETRACTION [RETRACT_LENGTH=<mm>] [RETRACT_SPEED=<mm/s>] [UNRETRACT_EXTRA_LENGTH=<mm>] [UNRETRACT_SPEED=<mm/s>]
gcode:
    # {% set S = params.S | float %}

    # {% if not (params.S or params.F or params.R or params.T)  %}
    #     GET_RETRACTION
    # {% endif %}

    {% if (params.S or params.F or params.R or params.T) %}
        SET_RETRACTION {% if params.S%}RETRACT_LENGTH={params.S|float} {% endif -%}
                       {% if params.F%}RETRACT_SPEED={params.F|float} {% endif -%}
                       {% if params.R%}UNRETRACT_EXTRA_LENGTH={params.R|float} {% endif -%}
                       {% if params.T%}UNRETRACT_SPEED={params.T|float}{% endif -%}
    {% endif %}
    GET_RETRACTION

[gcode_macro M204]
rename_existing: M204.1
gcode:
    {% set f = params.F|default(0.5)|float %}

    {% if 'S' in params %}
        {% set s = params.S|float %}
        SET_VELOCITY_LIMIT ACCEL={s} ACCEL_TO_DECEL={ s * f }
    {% else %}
        {% if 'P' in params %}
            {% set p = params.P|float %}
            {% if 'T' in params %}
                {% set t = params.T|float %}
                {% if p < t %}
                    SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
                {% else %}
                    SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
                {% endif %}
            {% else %}
                SET_VELOCITY_LIMIT ACCEL={p} ACCEL_TO_DECEL={ p * f }
            {% endif %}
        {% elif 'T' in params %}
            {% set t = params.T|float %}
            SET_VELOCITY_LIMIT ACCEL={t} ACCEL_TO_DECEL={ t * f }
        {% endif %}
    {% endif %}

[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}   
        {% endif %} 

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %} 

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %} 

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }   
                    {% endif %} 
                {% endif %} 

            {% endfor %}
        {% endif %} 
    {% endfor %}
