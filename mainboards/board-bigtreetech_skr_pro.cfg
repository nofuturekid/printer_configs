[mcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f407xx_31001F000F504D5347343120-if00
#   The serial port to connect to the MCU. If unsure (or if it
#   changes) see the "Where's my serial port?" section of the FAQ.
#   This parameter must be provided when using a serial port.
#baud: 250000
#   The baud rate to use. The default is 250000.
#canbus_uuid:
#   If using a device connected to a CAN bus then this sets the unique
#   chip identifier to connect to. This value must be provided when using
#   CAN bus for communication.
#canbus_interface:
#   If using a device connected to a CAN bus then this sets the CAN
#   network interface to use. The default is 'can0'.
#restart_method:
#   This controls the mechanism the host will use to reset the
#   micro-controller. The choices are 'arduino', 'cheetah', 'rpi_usb',
#   and 'command'. The 'arduino' method (toggle DTR) is common on
#   Arduino boards and clones. The 'cheetah' method is a special
#   method needed for some Fysetc Cheetah boards. The 'rpi_usb' method
#   is useful on Raspberry Pi boards with micro-controllers powered
#   over USB - it briefly disables power to all USB ports to
#   accomplish a micro-controller reset. The 'command' method involves
#   sending a Klipper command to the micro-controller so that it can
#   reset itself. The default is 'arduino' if the micro-controller
#   communicates over a serial port, 'command' otherwise.


[printer]
kinematics: cartesian
#   The type of printer in use. This option may be one of: cartesian,
#   corexy, corexz, hybrid-corexy, hybrid-corexz, rotary_delta, delta,
#   polar, winch, or none. This
#   parameter must be specified.

max_velocity: 300
#   Maximum velocity (in mm/s) of the toolhead (relative to the
#   print). This parameter must be specified.

max_accel: 3000
#   Maximum acceleration (in mm/s^2) of the toolhead (relative to the
#   print). This parameter must be specified.

# max_accel_to_decel:
#   A pseudo acceleration (in mm/s^2) controlling how fast the
#   toolhead may go from acceleration to deceleration. It is used to
#   reduce the top speed of short zig-zag moves (and thus reduce
#   printer vibration from these moves). The default is half of
#   max_accel.

max_z_velocity: 5
#   This sets the maximum velocity (in mm/s) of movement along the z
#   axis. This setting can be used to restrict the maximum speed of
#   the z stepper motor. The default is to use max_velocity for
#   max_z_velocity.

max_z_accel: 100
#   This sets the maximum acceleration (in mm/s^2) of movement along
#   the z axis. It limits the acceleration of the z stepper motor. The
#   default is to use max_accel for max_z_accel.

square_corner_velocity: 5.0
#   The maximum velocity (in mm/s) that the toolhead may travel a 90
#   degree corner at. A non-zero value can reduce changes in extruder
#   flow rates by enabling instantaneous velocity changes of the
#   toolhead during cornering. This value configures the internal
#   centripetal velocity cornering algorithm; corners with angles
#   larger than 90 degrees will have a higher cornering velocity while
#   corners with angles less than 90 degrees will have a lower
#   cornering velocity. If this is set to zero then the toolhead will
#   decelerate to zero at each corner. The default is 5mm/s.


# The stepper_x section is used to describe the stepper controlling
# the X axis in a cartesian robot.
[stepper_x]
step_pin: PE9
dir_pin: PF1
enable_pin: !PF2
microsteps: 16
rotation_distance: 40
endstop_pin: !PB10
position_endstop: 0
position_max: 200
homing_speed: 50


# Configure a TMC5160 stepper motor driver via SPI bus. To use this feature,
# define a config section with a “tmc5160” prefix followed by the name of the
# corresponding stepper config section (for example, “[tmc5160 stepper_x]”).
[tmc5160 stepper_x]
cs_pin: PA15
#   The pin corresponding to the TMC5160 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
# spi_speed:
spi_bus: spi3a
# spi_software_sclk_pin:
# spi_software_mosi_pin:
# spi_software_miso_pin:
#   See the "common SPI settings" section for a description of the
#   above parameters.
# chain_position:
# chain_length:
#   These parameters configure an SPI daisy chain. The two parameters
#   define the stepper position in the chain and the total chain length.
#   Position 1 corresponds to the stepper that connects to the MOSI signal.
#   The default is to not use an SPI daisy chain.
# interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
run_current: 0.800
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.500
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
sense_resistor: 0.075
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.075 ohms.
stealthchop_threshold: 0
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode. Try to reexperience this with tmc5160.
#   Values can be much higher than other tmcs.
# driver_IHOLDDELAY: 6
# driver_TPOWERDOWN: 10
# driver_TBL: 2
# driver_TOFF: 3
# driver_HEND: 2
# driver_HSTRT: 5
# driver_FD3: 0
# driver_TPFD: 4
# driver_CHM: 0
# driver_VHIGHFS: 0
# driver_VHIGHCHM: 0
# driver_DISS2G: 0
# driver_DISS2VS: 0
# driver_PWM_AUTOSCALE: True
# driver_PWM_AUTOGRAD: True
# driver_PWM_FREQ: 0
# driver_FREEWHEEL: 0
# driver_PWM_GRAD: 0
# driver_PWM_OFS: 30
# driver_PWM_REG: 4
# driver_PWM_LIM: 12
# driver_SGT: 0
# driver_SEMIN: 0
# driver_SEUP: 0
# driver_SEMAX: 0
# driver_SEDN: 0
# driver_SEIMIN: 0
# driver_SFILT: 0
#   Set the given register during the configuration of the TMC5160
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
# diag0_pin: PB10
# diag1_pin:
#   The micro-controller pin attached to one of the DIAG lines of the
#   TMC5160 chip. Only a single diag pin should be specified. The pin
#   is "active low" and is thus normally prefaced with "^!". Setting
#   this creates a "tmc5160_stepper_x:virtual_endstop" virtual pin
#   which may be used as the stepper's endstop_pin. Doing this enables
#   "sensorless homing". (Be sure to also set driver_SGT to an
#   appropriate sensitivity value.) The default is to not enable
#   sensorless homing.


# The stepper_y section is used to describe the stepper controlling
# the Y axis in a cartesian robot.
[stepper_y]
step_pin: PE11
dir_pin: PE8
enable_pin: !PD7
microsteps: 16
rotation_distance: 40
endstop_pin: !PE12
position_endstop: 0
position_max: 200
homing_speed: 50


[tmc5160 stepper_y]
cs_pin: PB8
#   The pin corresponding to the TMC5160 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
# spi_speed:
spi_bus: spi3a
# spi_software_sclk_pin:
# spi_software_mosi_pin:
# spi_software_miso_pin:
#   See the "common SPI settings" section for a description of the
#   above parameters.
# chain_position:
# chain_length:
#   These parameters configure an SPI daisy chain. The two parameters
#   define the stepper position in the chain and the total chain length.
#   Position 1 corresponds to the stepper that connects to the MOSI signal.
#   The default is to not use an SPI daisy chain.
# interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
run_current: 0.800
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.500
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
sense_resistor: 0.075
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.075 ohms.
stealthchop_threshold: 0
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode. Try to reexperience this with tmc5160.
#   Values can be much higher than other tmcs.
# driver_IHOLDDELAY: 6
# driver_TPOWERDOWN: 10
# driver_TBL: 2
# driver_TOFF: 3
# driver_HEND: 2
# driver_HSTRT: 5
# driver_FD3: 0
# driver_TPFD: 4
# driver_CHM: 0
# driver_VHIGHFS: 0
# driver_VHIGHCHM: 0
# driver_DISS2G: 0
# driver_DISS2VS: 0
# driver_PWM_AUTOSCALE: True
# driver_PWM_AUTOGRAD: True
# driver_PWM_FREQ: 0
# driver_FREEWHEEL: 0
# driver_PWM_GRAD: 0
# driver_PWM_OFS: 30
# driver_PWM_REG: 4
# driver_PWM_LIM: 12
# driver_SGT: 0
# driver_SEMIN: 0
# driver_SEUP: 0
# driver_SEMAX: 0
# driver_SEDN: 0
# driver_SEIMIN: 0
# driver_SFILT: 0
#   Set the given register during the configuration of the TMC5160
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
# diag0_pin: PE12
# diag1_pin:
#   The micro-controller pin attached to one of the DIAG lines of the
#   TMC5160 chip. Only a single diag pin should be specified. The pin
#   is "active low" and is thus normally prefaced with "^!". Setting
#   this creates a "tmc5160_stepper_x:virtual_endstop" virtual pin
#   which may be used as the stepper's endstop_pin. Doing this enables
#   "sensorless homing". (Be sure to also set driver_SGT to an
#   appropriate sensitivity value.) The default is to not enable
#   sensorless homing.


# The stepper_z section is used to describe the stepper controlling
# the Z axis in a cartesian robot.
[stepper_z]
step_pin: PE13
dir_pin: PC2
enable_pin: !PC0
microsteps: 16
rotation_distance: 8
endstop_pin: !PG8
position_endstop: 0.5
position_max: 200


[tmc5160 stepper_z]
cs_pin: PB9
#   The pin corresponding to the TMC5160 chip select line. This pin
#   will be set to low at the start of SPI messages and raised to high
#   after the message completes. This parameter must be provided.
# spi_speed:
spi_bus: spi3a
# spi_software_sclk_pin:
# spi_software_mosi_pin:
# spi_software_miso_pin:
#   See the "common SPI settings" section for a description of the
#   above parameters.
# chain_position:
# chain_length:
#   These parameters configure an SPI daisy chain. The two parameters
#   define the stepper position in the chain and the total chain length.
#   Position 1 corresponds to the stepper that connects to the MOSI signal.
#   The default is to not use an SPI daisy chain.
# interpolate: True
#   If true, enable step interpolation (the driver will internally
#   step at a rate of 256 micro-steps). The default is True.
run_current: 0.800
#   The amount of current (in amps RMS) to configure the driver to use
#   during stepper movement. This parameter must be provided.
hold_current: 0.500
#   The amount of current (in amps RMS) to configure the driver to use
#   when the stepper is not moving. The default is to use the same
#   value as run_current.
sense_resistor: 0.075
#   The resistance (in ohms) of the motor sense resistor. The default
#   is 0.075 ohms.
stealthchop_threshold: 0
#   The velocity (in mm/s) to set the "stealthChop" threshold to. When
#   set, "stealthChop" mode will be enabled if the stepper motor
#   velocity is below this value. The default is 0, which disables
#   "stealthChop" mode. Try to reexperience this with tmc5160.
#   Values can be much higher than other tmcs.
# driver_IHOLDDELAY: 6
# driver_TPOWERDOWN: 10
# driver_TBL: 2
# driver_TOFF: 3
# driver_HEND: 2
# driver_HSTRT: 5
# driver_FD3: 0
# driver_TPFD: 4
# driver_CHM: 0
# driver_VHIGHFS: 0
# driver_VHIGHCHM: 0
# driver_DISS2G: 0
# driver_DISS2VS: 0
# driver_PWM_AUTOSCALE: True
# driver_PWM_AUTOGRAD: True
# driver_PWM_FREQ: 0
# driver_FREEWHEEL: 0
# driver_PWM_GRAD: 0
# driver_PWM_OFS: 30
# driver_PWM_REG: 4
# driver_PWM_LIM: 12
# driver_SGT: 0
# driver_SEMIN: 0
# driver_SEUP: 0
# driver_SEMAX: 0
# driver_SEDN: 0
# driver_SEIMIN: 0
# driver_SFILT: 0
#   Set the given register during the configuration of the TMC5160
#   chip. This may be used to set custom motor parameters. The
#   defaults for each parameter are next to the parameter name in the
#   above list.
# diag0_pin: PG8
# diag1_pin:
#   The micro-controller pin attached to one of the DIAG lines of the
#   TMC5160 chip. Only a single diag pin should be specified. The pin
#   is "active low" and is thus normally prefaced with "^!". Setting
#   this creates a "tmc5160_stepper_x:virtual_endstop" virtual pin
#   which may be used as the stepper's endstop_pin. Doing this enables
#   "sensorless homing". (Be sure to also set driver_SGT to an
#   appropriate sensitivity value.) The default is to not enable
#   sensorless homing.


#[tmc5160 extruder]
#cs_pin: PB3
#spi_bus: spi3a
##diag1_pin: PE15
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999

#[tmc5160 extruder1]
#cs_pin: PG15
#spi_bus: spi3a
##diag1_pin: PE10
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999

#[tmc5160 extruder2]
#cs_pin: PG12
#spi_bus: spi3a
##diag1_pin: PG5
#run_current: 0.800
#hold_current: 0.500
#stealthchop_threshold: 999999


# Support saving variables to disk so that they are retained across restarts.
# See command templates and G-Code reference for further information.
[save_variables]
filename: ~/klipper_config/variables.cfg
#   Required - provide a filename that would be used to save the
#   variables to disk e.g. ~/variables.cfg


# Idle timeout. An idle timeout is automatically enabled - add an explicit
# idle_timeout config section to change the default settings.
[idle_timeout]
gcode:
    TURN_OFF_HEATERS
    M84
#   A list of G-Code commands to execute on an idle timeout. See
#   docs/Command_Templates.md for G-Code format. The default is to run
#   "TURN_OFF_HEATERS" and "M84".
timeout: 600
#   Idle time (in seconds) to wait before running the above G-Code
#   commands. The default is 600 seconds.


# A virtual sdcard may be useful if the host machine is not fast enough to run OctoPrint well.
# It allows the Klipper host software to directly print gcode files stored in a directory
# on the host using standard sdcard G-Code commands (eg, M24).
[virtual_sdcard]
path: ~/gcode_files
#   The path of the local directory on the host machine to look for
#   g-code files. This is a read-only directory (sdcard file writes
#   are not supported). One may point this to OctoPrint's upload
#   directory (generally ~/.octoprint/uploads/ ). This parameter must
#   be provided.


[display]
# Klipper <==> Marlin
# cs_pin <==> LCD_PINS_RS
# sclk_pin <==> LCD_PINS_D4
# sid_pin <==> LCD_PINS_ENABLE
# encoder_pins <==> BTN_EN1, BTN_EN2
# click_pin <==> BTN_ENC
lcd_type: st7920
cs_pin: PD10
sclk_pin: PG2
sid_pin: PD11
encoder_pins: PF11, PG10
click_pin: PA8


[output_pin beeper]
pin: PG4
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001
scale: 1000


[display_status]


# Pause/Resume functionality with support of position capture and restore.
# See the command reference for more information.
[pause_resume]
# recover_velocity: 50.0
#   When capture/restore is enabled, the speed at which to return to
#   the captured position (in mm/s). Default is 50.0 mm/s.


# Support for gcode arc (G2/G3) commands.
[gcode_arcs]
# resolution: 1.0
#   An arc will be split into segments. Each segment's length will
#   equal the resolution in mm set above. Lower values will produce a
#   finer arc, but also more work for your machine. Arcs smaller than
#   the configured value will become straight lines. The default is
#   1mm.


[include macros/default.cfg]

[gcode_macro M300]
default_parameter_S=1000
default_parameter_P=100
gcode:
    SET_PIN PIN=beeper VALUE={S}
    G4 P{P}
    SET_PIN PIN=beeper VALUE=0


# [gcode_macro TURN_ON_MOTORS]
# gcode:
#     SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
#     SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
#     SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
#     # SET_STEPPER_ENABLE STEPPER=extruder ENABLE=1


# [delayed_gcode AUTOSTART]
# initial_duration: 1
# gcode:
#     TURN_ON_MOTORS
